<?php
/**
 * Posts.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\PostsModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\GroupsModule\Constant as GroupsConstant;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;
use MU\PostsModule\Validator\Constraints as PostsAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @var GroupRepositoryInterface
     */
    protected $groupRepository;
    
    /**
     * Used to determine moderator user accounts for sending email notifications.
     *
     * @Assert\NotBlank()
     * @var integer $moderationGroupForContents
     */
    protected $moderationGroupForContents = 2;
    
    /**
     * The amount of contents shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $contentEntriesPerPage
     */
    protected $contentEntriesPerPage = 10;
    
    /**
     * Whether to add a link to contents of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnContentsOnAccountPage
     */
    protected $linkOwnContentsOnAccountPage = true;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull()
     * @PostsAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     * @var string $enabledFinderTypes
     */
    protected $enabledFinderTypes = 'content';
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi VariableApi service instance
     * @param GroupRepositoryInterface $groupRepository GroupRepository service instance
     */
    public function __construct(
        VariableApiInterface $variableApi,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->variableApi = $variableApi;
        $this->groupRepository = $groupRepository;
    
        $this->load();
    }
    
    /**
     * Returns the moderation group for contents.
     *
     * @return integer
     */
    public function getModerationGroupForContents()
    {
        return $this->moderationGroupForContents;
    }
    
    /**
     * Sets the moderation group for contents.
     *
     * @param integer $moderationGroupForContents
     *
     * @return void
     */
    public function setModerationGroupForContents($moderationGroupForContents)
    {
        if ($this->moderationGroupForContents !== $moderationGroupForContents) {
            $this->moderationGroupForContents = $moderationGroupForContents;
        }
    }
    
    /**
     * Returns the content entries per page.
     *
     * @return integer
     */
    public function getContentEntriesPerPage()
    {
        return $this->contentEntriesPerPage;
    }
    
    /**
     * Sets the content entries per page.
     *
     * @param integer $contentEntriesPerPage
     *
     * @return void
     */
    public function setContentEntriesPerPage($contentEntriesPerPage)
    {
        if (intval($this->contentEntriesPerPage) !== intval($contentEntriesPerPage)) {
            $this->contentEntriesPerPage = intval($contentEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own contents on account page.
     *
     * @return boolean
     */
    public function getLinkOwnContentsOnAccountPage()
    {
        return $this->linkOwnContentsOnAccountPage;
    }
    
    /**
     * Sets the link own contents on account page.
     *
     * @param boolean $linkOwnContentsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnContentsOnAccountPage($linkOwnContentsOnAccountPage)
    {
        if (boolval($this->linkOwnContentsOnAccountPage) !== boolval($linkOwnContentsOnAccountPage)) {
            $this->linkOwnContentsOnAccountPage = boolval($linkOwnContentsOnAccountPage);
        }
    }
    
    /**
     * Returns the enabled finder types.
     *
     * @return string
     */
    public function getEnabledFinderTypes()
    {
        return $this->enabledFinderTypes;
    }
    
    /**
     * Sets the enabled finder types.
     *
     * @param string $enabledFinderTypes
     *
     * @return void
     */
    public function setEnabledFinderTypes($enabledFinderTypes)
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = isset($enabledFinderTypes) ? $enabledFinderTypes : '';
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('MUPostsModule');
    
        if (isset($moduleVars['moderationGroupForContents'])) {
            $this->setModerationGroupForContents($moduleVars['moderationGroupForContents']);
        }
        if (isset($moduleVars['contentEntriesPerPage'])) {
            $this->setContentEntriesPerPage($moduleVars['contentEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnContentsOnAccountPage'])) {
            $this->setLinkOwnContentsOnAccountPage($moduleVars['linkOwnContentsOnAccountPage']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    
        // prepare group selectors, fallback to admin group for undefined values
        $adminGroupId = GroupsConstant::GROUP_ID_ADMIN;
        $groupId = $this->getModerationGroupForContents();
        if ($groupId < 1) {
            $groupId = $adminGroupId;
        }
    
        $this->setModerationGroupForContents($this->groupRepository->find($groupId));
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        // normalise group selector values
        $group = $this->getModerationGroupForContents();
        $group = is_object($group) ? $group->getGid() : intval($group);
        $this->setModerationGroupForContents($group);
    
        $this->variableApi->set('MUPostsModule', 'moderationGroupForContents', $this->getModerationGroupForContents());
        $this->variableApi->set('MUPostsModule', 'contentEntriesPerPage', $this->getContentEntriesPerPage());
        $this->variableApi->set('MUPostsModule', 'linkOwnContentsOnAccountPage', $this->getLinkOwnContentsOnAccountPage());
        $this->variableApi->set('MUPostsModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
