<?php
/**
 * Posts.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\PostsModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Zikula\Core\Doctrine\EntityAccess;
use MU\PostsModule\Traits\StandardFieldsTrait;
use MU\PostsModule\Validator\Constraints as PostsAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for content entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractContentEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'content';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=1000000000)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @PostsAssert\ListEntry(entityName="content", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $title
     */
    protected $title = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $descriptionForGoogle
     */
    protected $descriptionForGoogle = '';
    
    /**
     * @ORM\Column(name="hikingTour", type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $hikingTour
     */
    protected $hikingTour = true;
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $target
     */
    protected $target = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="2000")
     * @var text $startText
     */
    protected $startText = '';
    
    /**
     * @ORM\Column(type="text", length=20000)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="20000")
     * @var text $firstMainText
     */
    protected $firstMainText = '';
    
    /**
     * @ORM\Column(type="text", length=20000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="20000")
     * @var text $secondMainText
     */
    protected $secondMainText = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @PostsAssert\ListEntry(entityName="content", propertyName="experienceOfNature", multiple=false)
     * @var string $experienceOfNature
     */
    protected $experienceOfNature = '1';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @PostsAssert\ListEntry(entityName="content", propertyName="levelOfDifficulty", multiple=false)
     * @var string $levelOfDifficulty
     */
    protected $levelOfDifficulty = '1';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @PostsAssert\ListEntry(entityName="content", propertyName="requiredFitness", multiple=false)
     * @var string $requiredFitness
     */
    protected $requiredFitness = '2';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @PostsAssert\ListEntry(entityName="content", propertyName="other", multiple=true)
     * @var string $other
     */
    protected $other = '0';
    
    /**
     * @ORM\Column(type="datetime", nullable=true)
     * @Assert\DateTime()
     * @var DateTime $endDate
     */
    protected $endDate;
    
    
    /**
     * @Gedmo\Slug(fields={"title"}, updatable=true, unique=true, separator="-", style="lower")
     * @ORM\Column(type="string", length=255, unique=true)
     * @Assert\Length(min="1", max="255")
     * @var string $slug
     */
    protected $slug;
    
    /**
     * @ORM\OneToMany(targetEntity="\MU\PostsModule\Entity\ContentCategoryEntity", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true)
     * @var \MU\PostsModule\Entity\ContentCategoryEntity
     */
    protected $categories = null;
    
    
    /**
     * ContentEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->categories = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Sets the title.
     *
     * @param string $title
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($this->title !== $title) {
            $this->title = isset($title) ? $title : '';
        }
    }
    
    /**
     * Returns the description for google.
     *
     * @return string
     */
    public function getDescriptionForGoogle()
    {
        return $this->descriptionForGoogle;
    }
    
    /**
     * Sets the description for google.
     *
     * @param string $descriptionForGoogle
     *
     * @return void
     */
    public function setDescriptionForGoogle($descriptionForGoogle)
    {
        if ($this->descriptionForGoogle !== $descriptionForGoogle) {
            $this->descriptionForGoogle = isset($descriptionForGoogle) ? $descriptionForGoogle : '';
        }
    }
    
    /**
     * Returns the hiking tour.
     *
     * @return boolean
     */
    public function getHikingTour()
    {
        return $this->hikingTour;
    }
    
    /**
     * Sets the hiking tour.
     *
     * @param boolean $hikingTour
     *
     * @return void
     */
    public function setHikingTour($hikingTour)
    {
        if (boolval($this->hikingTour) !== boolval($hikingTour)) {
            $this->hikingTour = boolval($hikingTour);
        }
    }
    
    /**
     * Returns the target.
     *
     * @return string
     */
    public function getTarget()
    {
        return $this->target;
    }
    
    /**
     * Sets the target.
     *
     * @param string $target
     *
     * @return void
     */
    public function setTarget($target)
    {
        if ($this->target !== $target) {
            $this->target = isset($target) ? $target : '';
        }
    }
    
    /**
     * Returns the start text.
     *
     * @return text
     */
    public function getStartText()
    {
        return $this->startText;
    }
    
    /**
     * Sets the start text.
     *
     * @param text $startText
     *
     * @return void
     */
    public function setStartText($startText)
    {
        if ($this->startText !== $startText) {
            $this->startText = isset($startText) ? $startText : '';
        }
    }
    
    /**
     * Returns the first main text.
     *
     * @return text
     */
    public function getFirstMainText()
    {
        return $this->firstMainText;
    }
    
    /**
     * Sets the first main text.
     *
     * @param text $firstMainText
     *
     * @return void
     */
    public function setFirstMainText($firstMainText)
    {
        if ($this->firstMainText !== $firstMainText) {
            $this->firstMainText = isset($firstMainText) ? $firstMainText : '';
        }
    }
    
    /**
     * Returns the second main text.
     *
     * @return text
     */
    public function getSecondMainText()
    {
        return $this->secondMainText;
    }
    
    /**
     * Sets the second main text.
     *
     * @param text $secondMainText
     *
     * @return void
     */
    public function setSecondMainText($secondMainText)
    {
        if ($this->secondMainText !== $secondMainText) {
            $this->secondMainText = isset($secondMainText) ? $secondMainText : '';
        }
    }
    
    /**
     * Returns the experience of nature.
     *
     * @return string
     */
    public function getExperienceOfNature()
    {
        return $this->experienceOfNature;
    }
    
    /**
     * Sets the experience of nature.
     *
     * @param string $experienceOfNature
     *
     * @return void
     */
    public function setExperienceOfNature($experienceOfNature)
    {
        if ($this->experienceOfNature !== $experienceOfNature) {
            $this->experienceOfNature = isset($experienceOfNature) ? $experienceOfNature : '';
        }
    }
    
    /**
     * Returns the level of difficulty.
     *
     * @return string
     */
    public function getLevelOfDifficulty()
    {
        return $this->levelOfDifficulty;
    }
    
    /**
     * Sets the level of difficulty.
     *
     * @param string $levelOfDifficulty
     *
     * @return void
     */
    public function setLevelOfDifficulty($levelOfDifficulty)
    {
        if ($this->levelOfDifficulty !== $levelOfDifficulty) {
            $this->levelOfDifficulty = isset($levelOfDifficulty) ? $levelOfDifficulty : '';
        }
    }
    
    /**
     * Returns the required fitness.
     *
     * @return string
     */
    public function getRequiredFitness()
    {
        return $this->requiredFitness;
    }
    
    /**
     * Sets the required fitness.
     *
     * @param string $requiredFitness
     *
     * @return void
     */
    public function setRequiredFitness($requiredFitness)
    {
        if ($this->requiredFitness !== $requiredFitness) {
            $this->requiredFitness = isset($requiredFitness) ? $requiredFitness : '';
        }
    }
    
    /**
     * Returns the other.
     *
     * @return string
     */
    public function getOther()
    {
        return $this->other;
    }
    
    /**
     * Sets the other.
     *
     * @param string $other
     *
     * @return void
     */
    public function setOther($other)
    {
        if ($this->other !== $other) {
            $this->other = isset($other) ? $other : '';
        }
    }
    
    /**
     * Returns the end date.
     *
     * @return DateTime
     */
    public function getEndDate()
    {
        return $this->endDate;
    }
    
    /**
     * Sets the end date.
     *
     * @param DateTime $endDate
     *
     * @return void
     */
    public function setEndDate($endDate)
    {
        if ($this->endDate !== $endDate) {
            if (!(null == $endDate && empty($endDate)) && !(is_object($endDate) && $endDate instanceOf \DateTimeInterface)) {
                $endDate = new \DateTime($endDate);
            }
            
            if ($this->endDate != $endDate) {
                $this->endDate = $endDate;
            }
        }
    }
    
    /**
     * Returns the slug.
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->slug;
    }
    
    /**
     * Sets the slug.
     *
     * @param string $slug
     *
     * @return void
     */
    public function setSlug($slug)
    {
        if ($this->slug != $slug) {
            $this->slug = $slug;
        }
    }
    
    /**
     * Returns the categories.
     *
     * @return ArrayCollection[]
     */
    public function getCategories()
    {
        return $this->categories;
    }
    
    
    /**
     * Sets the categories.
     *
     * @param ArrayCollection $categories List of categories
     *
     * @return void
     */
    public function setCategories(ArrayCollection $categories)
    {
        foreach ($this->categories as $category) {
            if (false === $key = $this->collectionContains($categories, $category)) {
                $this->categories->removeElement($category);
            } else {
                $categories->remove($key);
            }
        }
        foreach ($categories as $category) {
            $this->categories->add($category);
        }
    }
    
    /**
     * Checks if a collection contains an element based only on two criteria (categoryRegistryId, category).
     *
     * @param ArrayCollection $collection Given collection
     * @param \MU\PostsModule\Entity\ContentCategoryEntity $element Element to search for
     *
     * @return bool|int
     */
    private function collectionContains(ArrayCollection $collection, \MU\PostsModule\Entity\ContentCategoryEntity $element)
    {
        foreach ($collection as $key => $category) {
            /** @var \MU\PostsModule\Entity\ContentCategoryEntity $category */
            if ($category->getCategoryRegistryId() == $element->getCategoryRegistryId()
                && $category->getCategory() == $element->getCategory()
            ) {
                return $key;
            }
        }
    
        return false;
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array List of resulting arguments
     */
    public function createUrlArgs()
    {
        return [
            'slug' => $this->getSlug()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'mupostsmodule.ui_hooks.contents';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects Objects that are added to this array
     * 
     * @return array List of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = [])
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Content ' . $this->getKey() . ': ' . $this->getTitle();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    
        // clone categories
        $categories = $this->categories;
        $this->categories = new ArrayCollection();
        foreach ($categories as $c) {
            $newCat = clone $c;
            $this->categories->add($newCat);
            $newCat->setEntity($this);
        }
    }
}
